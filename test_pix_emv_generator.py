#!/usr/bin/env python3
"""
Script de teste para o gerador de PIX EMV din√¢mico
Demonstra a gera√ß√£o de QR Code PIX seguindo padr√µes do Banco Central
"""

import os
import sys
import django
from decimal import Decimal

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from invoices.pix_service import InvoicePixService
from invoices.models import Invoice, InvoicePixPayment


def validate_emv_structure(brcode):
    """
    Valida a estrutura b√°sica do BR Code EMV de forma mais rigorosa
    """
    validations = []
    
    # Verificar in√≠cio do payload (Payload Format Indicator)
    if brcode.startswith("000201"):
        validations.append("‚úÖ Payload Format Indicator correto (000201)")
    else:
        validations.append("‚ùå Payload Format Indicator incorreto")
    
    # Verificar Point of Initiation Method (din√¢mico)
    if "010212" in brcode:
        validations.append("‚úÖ Point of Initiation Method correto (din√¢mico)")
    else:
        validations.append("‚ùå Point of Initiation Method incorreto")
    
    # Verificar presen√ßa de chave PIX na posi√ß√£o correta
    if "15992202706" in brcode:
        validations.append("‚úÖ Chave PIX presente (15992202706)")
    else:
        validations.append("‚ùå Chave PIX n√£o encontrada")
    
    # Verificar GUI do PIX
    if "br.gov.bcb.pix" in brcode:
        validations.append("‚úÖ GUI do PIX presente (br.gov.bcb.pix)")
    else:
        validations.append("‚ùå GUI do PIX n√£o encontrado")
    
    # Verificar Merchant Category Code
    if "52040000" in brcode:
        validations.append("‚úÖ Merchant Category Code correto (0000)")
    else:
        validations.append("‚ùå Merchant Category Code incorreto")
    
    # Verificar c√≥digo do pa√≠s
    if "5802BR" in brcode:
        validations.append("‚úÖ C√≥digo do pa√≠s presente (BR)")
    else:
        validations.append("‚ùå C√≥digo do pa√≠s n√£o encontrado")
    
    # Verificar moeda (BRL)
    if "5303986" in brcode:
        validations.append("‚úÖ C√≥digo da moeda correto (986 = BRL)")
    else:
        validations.append("‚ùå C√≥digo da moeda incorreto")
    
    # Verificar nome do recebedor
    if "Fred Carvalho" in brcode:
        validations.append("‚úÖ Nome do recebedor presente")
    else:
        validations.append("‚ùå Nome do recebedor n√£o encontrado")
    
    # Verificar cidade
    if "RIO DE JANEIRO" in brcode:
        validations.append("‚úÖ Cidade presente (RIO DE JANEIRO)")
    else:
        validations.append("‚ùå Cidade n√£o encontrada")
    
    # Verificar CRC (√∫ltimos 4 d√≠gitos devem ser hexadecimais)
    crc = brcode[-4:]
    try:
        int(crc, 16)
        validations.append("‚úÖ CRC16 v√°lido")
    except ValueError:
        validations.append("‚ùå CRC16 inv√°lido")
    
    return validations


def test_pix_emv_generation():
    """
    Testa a gera√ß√£o de PIX EMV com diferentes valores
    """
    print("üöÄ Testando Gerador de PIX EMV Din√¢mico")
    print("=" * 50)
    
    # Criar inst√¢ncia do servi√ßo
    pix_service = InvoicePixService()
    
    print(f"üìã Dados do Recebedor:")
    print(f"   Nome: {pix_service.receiver_data['name']}")
    print(f"   Cidade: {pix_service.receiver_data['city']}")
    print(f"   Chave PIX: {pix_service.receiver_data['pix_key']} (CPF)")
    print()
    
    # Simular dados de uma invoice fict√≠cia
    class MockInvoice:
        def __init__(self, invoice_id, amount):
            self.id = invoice_id
            self.amount = amount
            self.transaction = None
            self.singlesale = None
            
    class MockPixPayment:
        def __init__(self, correlation_id, invoice):
            self.correlation_id = correlation_id
            self.invoice = invoice
    
    # Teste com diferentes valores
    test_values = [10.50, 25.99, 100.00, 1500.75]
    
    for i, amount in enumerate(test_values, 1):
        print(f"üí∞ Teste {i}: Valor R$ {amount:.2f}")
        print("-" * 30)
        
        # Criar objetos fict√≠cios
        mock_invoice = MockInvoice(f"TEST{i:03d}", amount)
        mock_pix = MockPixPayment(f"test-{i}-123456789", mock_invoice)
        
        try:
            # Gerar BR Code EMV
            brcode = pix_service._generate_emv_brcode(mock_pix, amount)
            
            # Validar estrutura b√°sica
            if brcode.startswith("000201") and len(brcode) > 50:
                print(f"‚úÖ BR Code gerado com sucesso!")
                print(f"üì± Tamanho: {len(brcode)} caracteres")
                
                # Mostrar partes principais do c√≥digo
                print(f"üîß Detalhes t√©cnicos:")
                print(f"   - Payload Format: {brcode[0:6]}")
                print(f"   - Point of Init: {brcode[6:12]}")
                print(f"   - PIX Key inclu√≠da: {'15992202706' in brcode}")
                print(f"   - Valor inclu√≠do: {f'{amount:.2f}' in brcode}")
                print(f"   - CRC16: {brcode[-4:]}")
                
                # Valida√ß√£o rigorosa
                print(f"üîç Valida√ß√£o detalhada:")
                validations = validate_emv_structure(brcode)
                for validation in validations:
                    print(f"     {validation}")
                
                # Mostrar c√≥digo completo (truncado para visualiza√ß√£o)
                if len(brcode) > 80:
                    print(f"üìÑ BR Code: {brcode[:40]}...{brcode[-20:]}")
                else:
                    print(f"üìÑ BR Code: {brcode}")
                    
            else:
                print(f"‚ùå Erro: BR Code inv√°lido ou mal formado")
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar BR Code: {str(e)}")
            
        print()
    
    # Teste de QR Code
    print("üñºÔ∏è  Testando gera√ß√£o de QR Code")
    print("-" * 30)
    
    try:
        mock_invoice = MockInvoice("QR001", 50.00)
        mock_pix = MockPixPayment("qrtest-123456789", mock_invoice)
        
        brcode = pix_service._generate_emv_brcode(mock_pix, 50.00)
        qr_data = pix_service._generate_local_qrcode(brcode)
        
        if qr_data and len(qr_data) > 100:
            print(f"‚úÖ QR Code gerado com sucesso!")
            print(f"üìä Tamanho base64: {len(qr_data)} caracteres")
            print(f"üéØ Primeiro bytes: {qr_data[:50]}...")
        else:
            print(f"‚ùå Erro: QR Code inv√°lido")
            
    except Exception as e:
        print(f"‚ùå Erro ao gerar QR Code: {str(e)}")
    
    print()
    print("üèÅ Teste conclu√≠do!")
    
    # Exibir um exemplo de BR Code v√°lido para compara√ß√£o
    print("\n" + "=" * 60)
    print("üìã EXEMPLO DE BR CODE V√ÅLIDO PARA BANCOS:")
    print("=" * 60)
    mock_example = MockPixPayment("example-123", MockInvoice("001", 25.00))
    example_brcode = pix_service._generate_emv_brcode(mock_example, 25.00)
    print(f"BR Code completo: {example_brcode}")
    print()
    
    # Quebrar o c√≥digo para an√°lise
    print("üîç AN√ÅLISE DETALHADA DO C√ìDIGO:")
    print("-" * 40)
    pos = 0
    campos = [
        ("00", "Payload Format Indicator"),
        ("01", "Point of Initiation Method"),
        ("26", "Merchant Account Information"),
        ("52", "Merchant Category Code"),
        ("53", "Transaction Currency"),
        ("54", "Transaction Amount"),
        ("58", "Country Code"),
        ("59", "Merchant Name"),
        ("60", "Merchant City"),
        ("62", "Additional Data Field"),
        ("63", "CRC16")
    ]
    
    for tag, desc in campos:
        if pos < len(example_brcode) and example_brcode[pos:pos+2] == tag:
            length = int(example_brcode[pos+2:pos+4])
            value = example_brcode[pos+4:pos+4+length]
            print(f"{tag}: {desc}")
            print(f"    Tamanho: {length:02d}")
            print(f"    Valor: {value}")
            pos += 4 + length
    
    print("=" * 60)


if __name__ == "__main__":
    test_pix_emv_generation()
    
    print("\n" + "=" * 50)
    print("üìö Informa√ß√µes adicionais:")
    print("- Este gerador segue o padr√£o EMV QR Code")
    print("- Baseado nas especifica√ß√µes do Banco Central v2.3.0")
    print("- Chave PIX: CPF do Fred Carvalho (15992202706)")
    print("- Valores din√¢micos conforme nota fiscal")
    print("- QR Code compat√≠vel com aplicativos banc√°rios")
    print("=" * 50) 