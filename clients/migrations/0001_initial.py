# Generated by Django 4.2.10 on 2025-05-16 16:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=255, verbose_name='email')),
                ('phone', models.CharField(max_length=20, verbose_name='telefone')),
                ('address', models.CharField(max_length=255, verbose_name='endereço')),
                ('address_number', models.CharField(max_length=20, verbose_name='número')),
                ('address_complement', models.CharField(blank=True, max_length=100, null=True, verbose_name='complemento')),
                ('neighborhood', models.CharField(max_length=100, verbose_name='bairro')),
                ('city', models.CharField(max_length=100, verbose_name='cidade')),
                ('state', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, verbose_name='estado')),
                ('zipcode', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator(message='Digite um CEP válido no formato XXXXX-XXX', regex='^\\d{5}-\\d{3}$')], verbose_name='CEP')),
                ('client_type', models.CharField(choices=[('INDIVIDUAL', 'Pessoa Física'), ('COMPANY', 'Pessoa Jurídica')], default='INDIVIDUAL', max_length=10, verbose_name='tipo de cliente')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to=settings.AUTH_USER_MODEL, verbose_name='professor')),
            ],
            options={
                'verbose_name': 'cliente',
                'verbose_name_plural': 'clientes',
                'ordering': ['client_type', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IndividualClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='nome completo')),
                ('cpf', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(message='Digite um CPF válido no formato XXX.XXX.XXX-XX', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('rg', models.CharField(blank=True, max_length=30, null=True, verbose_name='RG')),
                ('birth_date', models.DateField(verbose_name='data de nascimento')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='individual', to='clients.client', verbose_name='cliente')),
            ],
            options={
                'verbose_name': 'cliente pessoa física',
                'verbose_name_plural': 'clientes pessoa física',
            },
        ),
        migrations.CreateModel(
            name='CompanyClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255, verbose_name='razão social')),
                ('trade_name', models.CharField(max_length=255, verbose_name='nome fantasia')),
                ('cnpj', models.CharField(max_length=18, validators=[django.core.validators.RegexValidator(message='Digite um CNPJ válido no formato XX.XXX.XXX/XXXX-XX', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$')], verbose_name='CNPJ')),
                ('state_registration', models.CharField(blank=True, max_length=30, null=True, verbose_name='inscrição estadual')),
                ('municipal_registration', models.CharField(blank=True, max_length=30, null=True, verbose_name='inscrição municipal')),
                ('responsible_name', models.CharField(max_length=255, verbose_name='nome do responsável')),
                ('responsible_cpf', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(message='Digite um CPF válido no formato XXX.XXX.XXX-XX', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF do responsável')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company', to='clients.client', verbose_name='cliente')),
            ],
            options={
                'verbose_name': 'cliente pessoa jurídica',
                'verbose_name_plural': 'clientes pessoa jurídica',
            },
        ),
    ]
