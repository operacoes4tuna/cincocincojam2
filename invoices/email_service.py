import os
import logging
import ssl
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from django.conf import settings
from django.template.loader import render_to_string
import base64
import requests
import urllib3

# Desabilitar avisos de SSL em desenvolvimento
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logger = logging.getLogger('invoices')

class EmailService:
    """Servi√ßo para envio de emails usando SendGrid SMTP"""
    
    def __init__(self):
        self.api_key = settings.SENDGRID_API_KEY
        self.from_email = settings.DEFAULT_FROM_EMAIL
        
        # Configura√ß√µes SMTP do SendGrid
        self.smtp_server = "smtp.sendgrid.net"
        self.smtp_port = 587
        self.smtp_username = "apikey"
        self.smtp_password = self.api_key
        
        # Configura√ß√µes da NFE.io para download de PDF
        self.nfeio_api_key = getattr(settings, 'NFEIO_API_KEY', None)
        self.nfeio_company_id = getattr(settings, 'NFEIO_COMPANY_ID', None)
        self.nfeio_base_url = 'https://api.nfe.io'
        
        # Configurar SSL para desenvolvimento
        self._configure_ssl_for_development()
        
    def send_invoice_email(self, invoice, recipient_email, custom_message=""):
        """
        Envia a nota fiscal por email para o destinat√°rio especificado
        
        Args:
            invoice: Inst√¢ncia do modelo Invoice
            recipient_email: Email do destinat√°rio
            custom_message: Mensagem personalizada opcional
        
        Returns:
            dict: Resultado do envio (success: bool, message: str)
        """
        
        # LOG INICIAL PARA DEBUG
        logger.info(f"=== INICIANDO ENVIO DE EMAIL ===")
        logger.info(f"Invoice ID: {invoice.id}")
        logger.info(f"Status: {invoice.status}")
        logger.info(f"External ID: {invoice.external_id}")
        logger.info(f"Focus PDF URL: {invoice.focus_pdf_url}")
        logger.info(f"Para: {recipient_email}")
        logger.info(f"SendGrid API Key configurada: {'Sim' if self.api_key else 'N√£o'}")
        
        # Em desenvolvimento, s√≥ simular se a chave API estiver claramente vazia ou fake
        if settings.DEBUG and (not self.api_key or self.api_key == '' or 'sua_chave' in self.api_key or 'YOUR_' in self.api_key):
            logger.info("‚ö†Ô∏è Modo desenvolvimento: simulando envio de email (chave API n√£o configurada)")
            return self._simulate_email_send(invoice, recipient_email, custom_message)
        
        if not self.api_key:
            logger.error("‚ùå SendGrid API key n√£o configurada")
            return {
                'success': False,
                'message': 'Servi√ßo de email n√£o configurado. Entre em contato com o administrador.'
            }
        
        try:
            logger.info("üìã Preparando dados do email...")
            
            # Obter dados da nota fiscal
            invoice_data = self._get_invoice_data(invoice)
            
            # Criar o assunto do email
            subject = f"Nota Fiscal {invoice_data['numero']} - {invoice_data['empresa']}"
            logger.info(f"üìß Assunto: {subject}")
            
            # Renderizar o template HTML do email
            html_content = render_to_string('invoices/email/invoice_email.html', {
                'invoice': invoice,
                'invoice_data': invoice_data,
                'custom_message': custom_message,
                'recipient_email': recipient_email
            })
            
            logger.info("üì§ Iniciando envio via SMTP...")
            
            # Enviar o email via SMTP
            return self._send_email_smtp(subject, html_content, recipient_email, invoice)
            
        except Exception as e:
            # Log detalhado do erro
            logger.error(f"‚ùå Erro ao enviar email da nota fiscal {invoice.id}: {str(e)}")
            logger.error(f"Tipo do erro: {type(e).__name__}")
            import traceback
            logger.error(f"Stack trace: {traceback.format_exc()}")
            
            # Analisar tipo de erro e dar mensagem espec√≠fica
            error_message = str(e)
            
            if '403' in error_message or 'Forbidden' in error_message:
                return {
                    'success': False,
                    'message': 'Erro de permiss√£o no SendGrid. Verifique se a chave API est√° v√°lida e tem permiss√µes para envio de email. Chave pode estar expirada ou sem permiss√µes adequadas.'
                }
            elif '401' in error_message or 'Unauthorized' in error_message:
                return {
                    'success': False,
                    'message': 'Chave API do SendGrid inv√°lida ou n√£o autorizada. Verifique se a chave est√° correta e ainda v√°lida.'
                }
            elif 'SSL' in error_message or 'certificate' in error_message.lower():
                return {
                    'success': False,
                    'message': 'Erro de SSL/certificado. Tente novamente em alguns minutos ou entre em contato com o suporte.'
                }
            else:
                return {
                    'success': False,
                    'message': f'Erro ao enviar email: {error_message}'
                }
    
    def _get_invoice_data(self, invoice):
        """Extrai dados relevantes da nota fiscal"""
        data = {
            'numero': invoice.external_id or invoice.id,
            'empresa': 'CincoCincoJAM',
            'valor': 0,
            'cliente': 'Cliente',
        }
        
        # Tentar obter dados da transa√ß√£o ou venda
        if invoice.transaction:
            data['valor'] = invoice.transaction.amount
            data['cliente'] = invoice.transaction.enrollment.student.get_full_name()
        elif invoice.singlesale:
            data['valor'] = invoice.singlesale.amount
            data['cliente'] = invoice.singlesale.customer_name
        elif invoice.amount:
            data['valor'] = invoice.amount
            data['cliente'] = invoice.customer_name or 'Cliente'
            
        return data
    
 
    
    def _configure_ssl_for_development(self):
        """Configura SSL para ambiente de desenvolvimento"""
        if settings.DEBUG:
            try:
                # Configurar requests para n√£o verificar SSL em desenvolvimento
                import requests.packages.urllib3 as urllib3
                urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                
                # Configurar SSL global para desenvolvimento
                import ssl as ssl_module
                ssl_module._create_default_https_context = ssl_module._create_unverified_context
                
                logger.info("Configura√ß√£o SSL flex√≠vel aplicada para desenvolvimento")
            except Exception as e:
                logger.warning(f"N√£o foi poss√≠vel configurar SSL flex√≠vel: {str(e)}")
    
    def _simulate_email_send(self, invoice, recipient_email, custom_message=""):
        """Simula envio de email para desenvolvimento quando API n√£o est√° configurada"""
        try:
            # Obter dados da nota fiscal
            invoice_data = self._get_invoice_data(invoice)
            
            logger.info("=== SIMULA√á√ÉO DE ENVIO DE EMAIL ===")
            logger.info(f"Para: {recipient_email}")
            logger.info(f"Assunto: Nota Fiscal {invoice_data['numero']} - {invoice_data['empresa']}")
            logger.info(f"Cliente: {invoice_data['cliente']}")
            logger.info(f"Valor: R$ {invoice_data['valor']:.2f}")
            logger.info(f"Status: {invoice.get_status_display()}")
            
            if custom_message:
                logger.info(f"Mensagem personalizada: {custom_message}")
            
            # Testar se o PDF pode ser anexado
            if hasattr(invoice, 'focus_pdf_url') and invoice.focus_pdf_url:
                logger.info(f"PDF dispon√≠vel: {invoice.focus_pdf_url}")
                
                # Testar o anexo do PDF
                pdf_attachment = self._get_pdf_attachment_smtp(invoice)
                if pdf_attachment:
                    logger.info("‚úÖ PDF seria anexado com sucesso ao email!")
                else:
                    logger.warning("‚ö†Ô∏è PDF dispon√≠vel mas falha ao criar anexo")
            else:
                logger.info("‚ÑπÔ∏è Sem PDF para anexar")
            
            logger.info("=== FIM DA SIMULA√á√ÉO ===")
            
            return {
                'success': True,
                'message': f'Email enviado com sucesso para {recipient_email} (modo desenvolvimento)'
            }
            
        except Exception as e:
            logger.error(f"Erro na simula√ß√£o: {str(e)}")
            return {
                'success': True,  # Mesmo com erro na simula√ß√£o, consideramos sucesso
                'message': f'Email enviado com sucesso (modo desenvolvimento)'
            }
    
    def _send_email_smtp(self, subject, html_content, recipient_email, invoice):
        """Envia email usando SMTP do SendGrid (baseado no c√≥digo que funciona)"""
        try:
            logger.info("üìù Criando estrutura do email...")
            
            # Criar mensagem
            message = MIMEMultipart("alternative")
            message["Subject"] = subject
            message["From"] = self.from_email
            message["To"] = recipient_email

            # Conte√∫do do email (texto e HTML)
            text_content = f"Nota Fiscal {invoice.external_id or invoice.id}\n\nEste email cont√©m informa√ß√µes da sua nota fiscal."
            
            # Criar partes do email
            part1 = MIMEText(text_content, "plain", "utf-8")
            part2 = MIMEText(html_content, "html", "utf-8")

            # Adicionar partes √† mensagem
            message.attach(part1)
            message.attach(part2)
            
            # ‚úÖ ANEXAR PDF - SEMPRE TENTAR SE POSS√çVEL
            logger.info("üìé Verificando se pode anexar PDF...")
            
            # Debug das condi√ß√µes para anexo
            logger.info(f"üìã Condi√ß√µes para anexo:")
            logger.info(f"   - focus_pdf_url: {'‚úÖ Sim' if invoice.focus_pdf_url else '‚ùå N√£o'}")
            logger.info(f"   - external_id: {'‚úÖ Sim' if invoice.external_id else '‚ùå N√£o'}")
            logger.info(f"   - NFE.io API Key: {'‚úÖ Sim' if self.nfeio_api_key else '‚ùå N√£o'}")
            logger.info(f"   - NFE.io Company ID: {'‚úÖ Sim' if self.nfeio_company_id else '‚ùå N√£o'}")
            
            # üöÄ PROTOCOLO AGRESSIVO DE ANEXO PDF
            pdf_attachment = None
            
            # SEMPRE tentar protocolo FOR√áADO primeiro (funciona melhor)
            logger.info("üéØ Tentando protocolo FOR√áADO de anexo...")
            try:
                pdf_attachment = self.force_pdf_attachment(invoice)
            except Exception as force_error:
                logger.error(f"üö® Protocolo for√ßado falhou: {str(force_error)}")
            
            # Se protocolo for√ßado falhou, tentar m√©todo normal
            if not pdf_attachment:
                logger.warning("‚ö†Ô∏è Protocolo for√ßado falhou, tentando m√©todo normal...")
                try:
                    pdf_attachment = self._get_pdf_attachment_smtp(invoice)
                except Exception as pdf_error:
                    logger.error(f"üö® M√©todo normal tamb√©m falhou: {str(pdf_error)}")
            
            # Anexar se conseguimos o PDF
            if pdf_attachment:
                message.attach(pdf_attachment)
                logger.info(f"üéâ PDF ANEXADO COM SUCESSO para nota fiscal {invoice.id}")
            else:
                logger.error(f"‚ùå FALHA TOTAL: N√£o foi poss√≠vel anexar PDF para nota fiscal {invoice.id}")
                logger.error("üí° Poss√≠veis causas:")
                logger.error(f"   - External ID: {'‚úÖ' if invoice.external_id else '‚ùå'} {invoice.external_id}")
                logger.error(f"   - Focus PDF URL: {'‚úÖ' if invoice.focus_pdf_url else '‚ùå'} {invoice.focus_pdf_url}")
                logger.error(f"   - NFE.io API Key: {'‚úÖ' if self.nfeio_api_key else '‚ùå'}")
                logger.error(f"   - Status: {invoice.status}")
                logger.warning("üìß Email ser√° enviado SEM anexo")

            # Conectar e enviar via SMTP
            logger.info("üîå Conectando ao servidor SMTP SendGrid...")
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            
            # Iniciar TLS para conex√£o segura
            logger.info("üîí Iniciando conex√£o TLS...")
            server.starttls()
            
            # Login no servidor
            logger.info("üîë Fazendo login no SendGrid...")
            server.login(self.smtp_username, self.smtp_password)
            
            # Enviar email
            logger.info("üìß Enviando email...")
            text = message.as_string()
            server.sendmail(self.from_email, recipient_email, text)
            
            # Fechar conex√£o
            server.quit()
            
            # Mensagem de sucesso detalhada
            pdf_status = "com PDF anexado" if pdf_attachment else "sem PDF"
            logger.info(f"‚úÖ Email enviado com sucesso via SMTP para {recipient_email} ({pdf_status})")
            
            return {
                'success': True,
                'message': f'Email enviado com sucesso para {recipient_email} ({pdf_status})'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar email via SMTP: {str(e)}")
            
            # Analisar tipo de erro espec√≠fico para SMTP
            error_message = str(e)
            
            if 'authentication failed' in error_message.lower():
                return {
                    'success': False,
                    'message': 'Erro de autentica√ß√£o SMTP. Verifique se a chave API est√° correta.'
                }
            elif 'connection refused' in error_message.lower() or 'timeout' in error_message.lower():
                return {
                    'success': False,
                    'message': 'Erro de conex√£o com servidor SMTP. Verifique sua conex√£o de internet ou firewall.'
                }
            else:
                return {
                    'success': False,
                    'message': f'Erro ao enviar email: {error_message}'
                }
    
    def _get_pdf_attachment_smtp(self, invoice):
        """
        Baixa e prepara o PDF da nota fiscal como anexo para SMTP.
        Vers√£o FOR√áADA - tenta anexar sempre que poss√≠vel.
        """
        try:
            logger.info(f"üîç Iniciando processo de anexo PDF para nota fiscal {invoice.id}")
            
            # Verificar se temos URL do PDF
            if not invoice.focus_pdf_url:
                logger.warning(f"‚ùå Invoice {invoice.id} n√£o possui focus_pdf_url")
                logger.warning("üí° A nota fiscal precisa estar processada/aprovada para ter PDF")
                return None
            
            logger.info(f"‚úÖ PDF URL encontrada: {invoice.focus_pdf_url[:100]}...")
            
            # FOR√áAR ANEXO - TENTAR TODOS OS M√âTODOS POSS√çVEIS
            pdf_content = None
            
            # M√©todo 1: API autenticada da NFE.io (se temos credenciais)
            if self.nfeio_api_key and self.nfeio_company_id and invoice.external_id:
                logger.info("üîê Tentando M√©todo 1: Download via API autenticada NFE.io")
                pdf_content = self._download_pdf_via_api(invoice)
                if pdf_content:
                    logger.info(f"‚úÖ M√©todo 1 SUCESSO: PDF baixado via API (tamanho: {len(pdf_content)} bytes)")
                else:
                    logger.warning("‚ö†Ô∏è M√©todo 1 FALHOU: API NFE.io n√£o funcionou")
            else:
                logger.info("‚ÑπÔ∏è M√©todo 1 IGNORADO: Credenciais NFE.io n√£o dispon√≠veis ou external_id ausente")
            
            # M√©todo 2: Download direto da URL (sempre tentar se M√©todo 1 falhou)
            if not pdf_content:
                logger.info("üåê Tentando M√©todo 2: Download direto da URL")
                pdf_content = self._download_pdf_direct_content(invoice)
                if pdf_content:
                    logger.info(f"‚úÖ M√©todo 2 SUCESSO: PDF baixado diretamente (tamanho: {len(pdf_content)} bytes)")
                else:
                    logger.warning("‚ö†Ô∏è M√©todo 2 FALHOU: Download direto n√£o funcionou")
            
            # Verificar se conseguimos o PDF
            if not pdf_content:
                logger.error(f"‚ùå FALHA TOTAL: N√£o foi poss√≠vel obter o PDF da nota fiscal {invoice.id}")
                logger.error("üí° Poss√≠veis causas:")
                logger.error("   - URL do PDF inv√°lida ou expirada")
                logger.error("   - Problemas de conectividade")
                logger.error("   - PDF ainda n√£o gerado pela NFE.io")
                return None
            
            # Validar se √© realmente um PDF
            if not pdf_content.startswith(b'%PDF'):
                logger.error(f"‚ùå CONTE√öDO INV√ÅLIDO: Download n√£o retornou um PDF v√°lido (tamanho: {len(pdf_content)} bytes)")
                logger.error(f"Primeiros 100 bytes: {pdf_content[:100]}")
                return None
            
            # Criar anexo SMTP
            logger.info("üìé Criando anexo SMTP...")
            attachment = MIMEBase('application', 'pdf')
            attachment.set_payload(pdf_content)
            encoders.encode_base64(attachment)
            
            filename = f"nota_fiscal_{invoice.external_id or invoice.id}.pdf"
            attachment.add_header(
                'Content-Disposition',
                f'attachment; filename="{filename}"'
            )
            
            logger.info(f"üéâ PDF ANEXADO COM SUCESSO para nota fiscal {invoice.id} (arquivo: {filename})")
            return attachment
            
        except Exception as e:
            logger.error(f"üö® ERRO CR√çTICO ao preparar anexo PDF da nota fiscal {invoice.id}: {str(e)}")
            logger.error(f"Tipo do erro: {type(e).__name__}")
            import traceback
            logger.error(f"Stack trace: {traceback.format_exc()}")
            return None
    
    def _download_pdf_via_api(self, invoice):
        """
        Baixa o PDF usando a API autenticada da NFE.io
        """
        try:
            if not invoice.external_id:
                logger.warning(f"Invoice {invoice.id} n√£o possui external_id")
                return None
            
            # Construir URL da API
            api_url = f"{self.nfeio_base_url}/v1/companies/{self.nfeio_company_id}/serviceinvoices/{invoice.external_id}/pdf"
            
            # Headers com autentica√ß√£o
            headers = {
                'Authorization': f'Basic {self.nfeio_api_key}',
                'Content-Type': 'application/json'
            }
            
            logger.info(f"Baixando PDF via API NFE.io: {api_url}")
            
            # Fazer requisi√ß√£o
            session = requests.Session()
            if settings.DEBUG:
                session.verify = False  # Desabilitar verifica√ß√£o SSL em desenvolvimento
            
            response = session.get(api_url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                logger.info(f"PDF baixado com sucesso via API para invoice {invoice.id} (tamanho: {len(response.content)} bytes)")
                return response.content
            else:
                logger.warning(f"Falha no download via API. Status: {response.status_code}, Response: {response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"Erro no download via API NFE.io: {str(e)}")
            return None
    
    def _download_pdf_direct_content(self, invoice):
        """
        Tenta baixar o PDF diretamente da URL (m√©todo de fallback)
        """
        try:
            logger.info(f"Tentando download direto do PDF: {invoice.focus_pdf_url}")
            
            # Configurar sess√£o
            session = requests.Session()
            if settings.DEBUG:
                session.verify = False  # Desabilitar verifica√ß√£o SSL em desenvolvimento
            
            # Tentar com diferentes headers
            headers_options = [
                # Tentar com autentica√ß√£o da NFE.io se dispon√≠vel
                {
                    'Authorization': f'Basic {self.nfeio_api_key}',
                    'User-Agent': 'CincoCincoJAM/1.0'
                } if self.nfeio_api_key else {},
                # Tentar sem autentica√ß√£o
                {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                },
                # Tentar sem headers extras
                {}
            ]
            
            for i, headers in enumerate(headers_options):
                try:
                    logger.info(f"Tentativa {i+1} de download direto")
                    response = session.get(invoice.focus_pdf_url, headers=headers, timeout=30)
                    
                    if response.status_code == 200:
                        # Verificar se √© realmente um PDF
                        if response.content.startswith(b'%PDF'):
                            logger.info(f"PDF baixado com sucesso (tentativa {i+1}, tamanho: {len(response.content)} bytes)")
                            return response.content
                        else:
                            logger.warning(f"Resposta n√£o √© um PDF v√°lido (tentativa {i+1})")
                    else:
                        logger.warning(f"Status {response.status_code} na tentativa {i+1}")
                        
                except Exception as e:
                    logger.warning(f"Erro na tentativa {i+1}: {str(e)}")
                    continue
            
            return None
            
        except Exception as e:
            logger.error(f"Erro no download direto: {str(e)}")
            return None
    
    def _download_pdf_direct(self, invoice):
        """
        M√©todo legado mantido para compatibilidade
        """
        try:
            pdf_content = self._download_pdf_direct_content(invoice)
            if not pdf_content:
                return None
            
            # Criar anexo SMTP
            attachment = MIMEBase('application', 'pdf')
            attachment.set_payload(pdf_content)
            encoders.encode_base64(attachment)
            attachment.add_header(
                'Content-Disposition',
                f'attachment; filename="nota_fiscal_{invoice.external_id or invoice.id}.pdf"'
            )
            
            return attachment
            
        except Exception as e:
            logger.error(f"Erro no m√©todo legado: {str(e)}")
            return None

    def _send_email_fallback(self, invoice, recipient_email, custom_message=""):
        """M√©todo de fallback para envio de email quando h√° problemas de autentica√ß√£o ou SSL"""
        logger.info("Executando m√©todo de fallback para envio de email")
        
        # Em desenvolvimento, sempre simular com sucesso
        if settings.DEBUG:
            return self._simulate_email_send(invoice, recipient_email, custom_message)
        
        # Em produ√ß√£o, retornar erro informativo
        return {
            'success': False,
            'message': 'Erro de autentica√ß√£o com o servi√ßo de email. Verifique as configura√ß√µes de API.'
        }

    def debug_pdf_attachment(self, invoice):
        """
        M√©todo para debug detalhado do processo de anexo do PDF.
        Use este m√©todo para investigar problemas.
        """
        logger.info("=== DEBUG PDF ATTACHMENT ===")
        logger.info(f"Invoice ID: {invoice.id}")
        logger.info(f"External ID: {invoice.external_id}")
        logger.info(f"Status: {invoice.status}")
        logger.info(f"Focus Status: {invoice.focus_status}")
        logger.info(f"Focus PDF URL: {invoice.focus_pdf_url}")
        
        # Verificar credenciais NFE.io
        logger.info(f"NFE.io API Key configurada: {'Sim' if self.nfeio_api_key else 'N√£o'}")
        logger.info(f"NFE.io Company ID: {self.nfeio_company_id}")
        
        if invoice.focus_pdf_url:
            # Tentar download para debug
            logger.info("Tentando debug do download...")
            
            # M√©todo 1: Via API
            if self.nfeio_api_key and self.nfeio_company_id and invoice.external_id:
                logger.info("Testando download via API NFE.io...")
                pdf_content = self._download_pdf_via_api(invoice)
                if pdf_content:
                    logger.info(f"‚úÖ Download via API bem-sucedido (tamanho: {len(pdf_content)} bytes)")
                else:
                    logger.warning("‚ùå Download via API falhou")
            
            # M√©todo 2: Download direto
            logger.info("Testando download direto...")
            pdf_content = self._download_pdf_direct_content(invoice)
            if pdf_content:
                logger.info(f"‚úÖ Download direto bem-sucedido (tamanho: {len(pdf_content)} bytes)")
            else:
                logger.warning("‚ùå Download direto falhou")
        else:
            logger.warning("‚ùå Invoice n√£o possui focus_pdf_url")
        
        logger.info("=== FIM DEBUG ===")
        
        # Tentar criar anexo real
        attachment = self._get_pdf_attachment_smtp(invoice)
        if attachment:
            logger.info("‚úÖ Anexo criado com sucesso!")
            return True
        else:
            logger.warning("‚ùå Falha ao criar anexo")
            return False

    def force_pdf_attachment(self, invoice):
        """
        M√©todo FOR√áADO para anexar PDF - tenta TODAS as estrat√©gias poss√≠veis.
        Este m√©todo tenta anexar o PDF mesmo quando focus_pdf_url n√£o existe.
        """
        logger.info(f"üöÄ FOR√áANDO ANEXO DE PDF para invoice {invoice.id}")
        
        # ESTRAT√âGIA 1: Buscar direto na API NFE.io (mesmo sem focus_pdf_url)
        if invoice.external_id and self.nfeio_api_key:
            logger.info("üéØ Estrat√©gia 1: Buscar PDF direto na API NFE.io")
            pdf_content = self.get_pdf_from_nfeio_api(invoice)
            if pdf_content:
                logger.info("‚úÖ Estrat√©gia 1 SUCESSO: PDF obtido da API")
                return self._create_pdf_attachment(pdf_content, invoice)
            else:
                logger.warning("‚ö†Ô∏è Estrat√©gia 1 FALHOU: API NFE.io n√£o retornou PDF")
        
        # ESTRAT√âGIA 2: Usar focus_pdf_url se existir
        if invoice.focus_pdf_url:
            logger.info("üéØ Estrat√©gia 2: Download da focus_pdf_url")
            logger.info(f"üìÇ URL do PDF: {invoice.focus_pdf_url}")
            
            try:
                import requests
                
                session = requests.Session()
                if settings.DEBUG:
                    session.verify = False
                
                # Headers b√°sicos
                headers = {
                    'User-Agent': 'CincoCincoJAM/1.0 Email Service',
                    'Accept': 'application/pdf,*/*'
                }
                
                # Se temos credenciais NFE.io, usar
                if self.nfeio_api_key:
                    headers['Authorization'] = f'Basic {self.nfeio_api_key}'
                    logger.info("üîê Usando credenciais NFE.io")
                
                logger.info("‚¨áÔ∏è Fazendo download do PDF...")
                response = session.get(invoice.focus_pdf_url, headers=headers, timeout=30)
                
                if response.status_code == 200:
                    content = response.content
                    if content and len(content) > 100 and content.startswith(b'%PDF'):
                        logger.info(f"‚úÖ Estrat√©gia 2 SUCESSO: PDF baixado ({len(content)} bytes)")
                        return self._create_pdf_attachment(content, invoice)
                
                logger.warning(f"‚ö†Ô∏è Estrat√©gia 2 FALHOU: Status {response.status_code}")
                
            except Exception as e:
                logger.error(f"üö® Erro na Estrat√©gia 2: {str(e)}")
        
        # ESTRAT√âGIA 3: Buscar por outros m√©todos (se necess√°rio)
        logger.error(f"‚ùå TODAS AS ESTRAT√âGIAS FALHARAM para invoice {invoice.id}")
        return None
    
    def _create_pdf_attachment(self, pdf_content, invoice):
        """
        Cria o anexo SMTP a partir do conte√∫do do PDF
        """
        try:
            attachment = MIMEBase('application', 'pdf')
            attachment.set_payload(pdf_content)
            encoders.encode_base64(attachment)
            
            filename = f"nota_fiscal_{invoice.external_id or invoice.id}.pdf"
            attachment.add_header(
                'Content-Disposition',
                f'attachment; filename="{filename}"'
            )
            
            logger.info(f"üéâ ANEXO CRIADO COM SUCESSO: {filename}")
            return attachment
            
        except Exception as e:
            logger.error(f"üö® Erro ao criar anexo: {str(e)}")
            return None

    def get_pdf_from_nfeio_api(self, invoice):
        """
        Busca o PDF diretamente da API NFE.io, mesmo quando focus_pdf_url n√£o est√° preenchido.
        Este m√©todo tenta obter o PDF usando apenas o external_id.
        """
        try:
            if not invoice.external_id:
                logger.warning(f"‚ùå Invoice {invoice.id} n√£o possui external_id - imposs√≠vel buscar na API")
                return None
                
            if not self.nfeio_api_key or not self.nfeio_company_id:
                logger.warning(f"‚ùå Credenciais NFE.io n√£o configuradas")
                return None
            
            logger.info(f"üîç Buscando PDF na API NFE.io para external_id: {invoice.external_id}")
            
            # Construir URL da API
            api_url = f"{self.nfeio_base_url}/v1/companies/{self.nfeio_company_id}/serviceinvoices/{invoice.external_id}/pdf"
            
            # Headers com autentica√ß√£o
            headers = {
                'Authorization': f'Basic {self.nfeio_api_key}',
                'Content-Type': 'application/json',
                'User-Agent': 'CincoCincoJAM/1.0'
            }
            
            logger.info(f"üì° Requisi√ß√£o API: GET {api_url}")
            
            # Fazer requisi√ß√£o
            session = requests.Session()
            if settings.DEBUG:
                session.verify = False
            
            response = session.get(api_url, headers=headers, timeout=30)
            
            logger.info(f"üìä Status da resposta: {response.status_code}")
            
            if response.status_code == 200:
                content = response.content
                
                # Verificar se √© um PDF v√°lido
                if content and len(content) > 100 and content.startswith(b'%PDF'):
                    logger.info(f"‚úÖ PDF obtido com sucesso da API NFE.io (tamanho: {len(content)} bytes)")
                    
                    # Atualizar o focus_pdf_url no banco se n√£o existir
                    if not invoice.focus_pdf_url:
                        invoice.focus_pdf_url = api_url
                        invoice.save()
                        logger.info(f"üíæ focus_pdf_url atualizado no banco de dados")
                    
                    return content
                else:
                    logger.error(f"‚ùå Resposta da API n√£o √© um PDF v√°lido")
                    logger.error(f"Tamanho: {len(content) if content else 0} bytes")
                    if content:
                        logger.error(f"Primeiros 50 bytes: {content[:50]}")
                    return None
            else:
                logger.error(f"‚ùå Erro na API NFE.io: {response.status_code}")
                logger.error(f"Resposta: {response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"üö® Erro ao buscar PDF na API NFE.io: {str(e)}")
            return None